{"version":3,"sources":["webpack:///qibud-mods.js","webpack:///webpack/bootstrap 263fba9d343fc7da96d2","webpack:///./modules/core-deps.js","webpack:///./modules/common/common.js","webpack:///./modules/common/search-controller.js","webpack:///./modules/common/mailbox-controller.js","webpack:///./modules/common/mail-controller.js","webpack:///./modules/common/api-service.js","webpack:///./modules/dashboard/dashboard.js","webpack:///./modules/editor/editor.js","webpack:///./modules/editor/editor-controller.js","webpack:///./modules/editor/editor-evolve-controller.js","webpack:///./modules/home/home.js","webpack:///./modules/home/home-controller.js","webpack:///./modules/home/budgraph-factory.js","webpack:///./modules/home/budgraph-controller.js","webpack:///./modules/home/timeline-controller.js","webpack:///./modules/profile/profile.js","webpack:///./modules/profile/profile-controller.js","webpack:///./modules/viewer/viewer.js","webpack:///./modules/viewer/viewer-controller.js"],"names":[],"mappings":"AAAA;ACAA;AACA;ADEA;ACAA;AACA;ADEA;ACAA;AACA;AACA;ADEA;ACAA;AACA;AACA;AACA;AACA;AACA;ADEA;ACAA;AACA;ADEA;ACAA;AACA;ADEA;ACAA;AACA;AACA;ADEA;AACA;ACAA;AACA;ADEA;ACAA;AACA;ADEA;ACAA;AACA;ADEA;ACAA;AACA;ADEA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AEhDA;AACA;AACA;AACA;AACA;AFkDA;AEhDA;AFkDA;AEhDA;AACA;AACA;AFkDA;AEhDA;AACA;AACA;AACA;AACA;AFkDA;AEhDA;AACA;AFkDA;AEhDA;AACA;AACA;AFkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AGjFA;AHmFA;AGjFA;AACA;AACA;AHmFA;AGjFA;AHmFA;AACA;AACA;AACA,qDAAqD;AACrD,GAAG;AACH;AACA;AACA;AACA;AACA;AIjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAC;AJmGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AK9HT;AACA;AACA;AACA;AACA;AACA;AACA;ALgIA;AK9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ALgIA;AK9HA;AACA;ALgIA;AK9HA;AACA;AACA;AACA;AACA;ALgIA;AACA;AACA;AACA;AACA,OAAO;AACP,GAAG;AACH;AACA;AACA;AACA;AMpKA;AACA;ANsKA;AMpKA;ANsKA;AMpKA;AACA;AACA;ANsKA;AMpKA;AACA;AACA;AACA;ANsKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AO3LA;AP6LA,eAAe;AO3Lf;AACA;AACA;AP6LA,aAAa;AO3Lb;AP6LA;AO3LA;AACA;AACA;AACA;AACA;AP6LA;AO3LA;AACA;AACA;AACA;AACA;AP6LA;AO3LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AP6LA;AO3LA;AACA;AACA;AACA;AACA;AACA;AP6LA;AO3LA;AACA;AACA;AACA;AACA;AP6LA;AO3LA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AP6LA;AO3LA;AACA;AACA;AP6LA,WAAW;AO3LX;AACA;AACA;AACA;AACA;AACA;AP6LA,aAAa;AO3Lb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AP6LA,eAAe;AO3Lf;AACA;AACA;AACA;AACA;AP6LA;AO3LA;AACA;AACA;AACA;AACA;AP6LA;AO3LA;AACA;AACA;AACA;AACA;AP6LA;AO3LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AP6LA,eAAe;AO3Lf;AACA;AACA;AACA;AACA;AP6LA;AO3LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AP6LA;AO3LA;AACA,WAAC;AP6LD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AQrZA;AACA;AACA;AACA;AACA;AACA;ARuZA;AQrZA;AACA;ARuZA;AQrZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ARuZA;AQrZA,aAAK;ARuZL;AQrZA;AACA;AACA;ARuZA;AQrZA;AACA;ARuZA;AQrZA;AACA;ARuZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AS5cX;AT8cA;AS5cA;AACA;AACA;AT8cA,aAAa;AS5cb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AT8cA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AU9eA;AVgfA,GAAG;AU9eH;AACA;AACA;AVgfA;AU9eA;AACA;AACA;AACA;AVgfA;AU9eA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AVgfA;AU9eA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AVgfA,KAAK;AU9eL;AACA;AACA;AACA;AACA;AACA;AVgfA;AU9eA;AACA;AVgfA;AU9eA;AACA;AACA;AACA;AVgfA;AU9eA;AVgfA;AU9eA;AACA;AACA;AACA,WAAK;AACL;AACA;AACA;AVgfA;AU9eA;AACA;AACA;AVgfA;AU9eA;AACA;AACA;AACA;AACA;AACA;AVgfA;AU9eA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AVgfA;AU9eA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AVgfA;AU9eA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAS;AACT;AACA;AACA;AACA;AACA;AACA;AVgfA;AU9eA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AVgfA;AU9eA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAS;AACT;AACA;AACA;AACA;AACA;AACA;AVgfA;AU9eA;AACA;AACA;AACA,iBAAO;AACP;AACA;AVgfA;AU9eA,aAAK;AACL;AACA;AACA,aAAO;AACP;AACA;AACA;AACA;AVgfA;AACA;AU9eA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AVgfA;AU9eA;AACA;AVgfA;AU9eA;AACA;AACA;AACA;AACA;AVgfA;AACA,aAAa;AACb;AACA;AU9eA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AVgfA,aAAa;AACb;AACA;AU9eA;AACA;AACA;AVgfA;AU9eA;AVgfA;AU9eA;AVgfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AW5sBA;AX8sBA,WAAW;AW5sBX;AX8sBA;AW5sBA;AACA;AX8sBA;AW5sBA;AACA;AACA;AX8sBA,OAAO;AW5sBP;AACA;AACA;AX8sBA;AW5sBA;AACA;AACA;AACA;AX8sBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AYxuBA;AZ0uBA;AYxuBA;AACA;AACA;AZ0uBA;AYxuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AZ0uBA,SAAS;AACT;AACA,OAAO;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AahyBA;AbkyBA;AahyBA;AACA;AACA;AbkyBA;AahyBA;AACA;AACA;AACA;AACA;AACA;AACA;AbkyBA,eAAe;AahyBf;AACA;AACA;AACA;AACA;AACA;AbkyBA;AahyBA;AACA;AACA,aAAG;AbkyBH;AACA;AahyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AbkyBA;AahyBA;AbkyBA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA,aAAa;Acj1Bb;Adm1BA;Acj1BA;AACA;AACA;Adm1BA;Acj1BA;AACA;AACA;AACA;Adm1BA;Acj1BA;AACA;Adm1BA;Acj1BA;AACA;AACA,yBAAuB,iBAAiB;AACxC;AACA;Adm1BA;AACA;Acj1BA;AACA;AACA;AACA;AACA;Adm1BA;Acj1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;Adm1BA;Acj1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;Adm1BA;Acj1BA;Adm1BA;Acj1BA;Adm1BA;Acj1BA;AACA;Adm1BA;Acj1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;Adm1BA,GAAG;Acj1BH;AACA;AACA;AACA;AACA;Adm1BA;Acj1BA;Adm1BA;Acj1BA;AACA;Adm1BA;Acj1BA;AACA;AACA;Adm1BA;Acj1BA;AACA;AACA;AACA;Adm1BA,yBAAyB,wBAAwB;AACjD;Acj1BA;AACA;Adm1BA;Acj1BA;Adm1BA;Acj1BA;AACA;Adm1BA,WAAW;Acj1BX;Adm1BA;Acj1BA;AACA;Adm1BA;Acj1BA;AACA;Adm1BA;Acj1BA;AACA;AACA;Adm1BA;Acj1BA;AACA;Adm1BA;Acj1BA;AACA;Adm1BA,SAAS;Acj1BT;AACA;AACA;Adm1BA;Acj1BA;Adm1BA;Acj1BA;Adm1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;Aep/BA;Afs/BA,SAAS;Aep/BT;AACA;AACA;Afs/BA;Aep/BA;AACA;AACA;AACA;AACA;AACA;Afs/BA;Aep/BA;AACA;AACA;AACA;AACA;AACA;AACA;Afs/BA;Aep/BA;AACA;Afs/BA;Aep/BA;AACA;AACA;AACA;AACA;AACA,OAAK;AACL;Afs/BA;AACA;Aep/BA;AACA;AACA;Afs/BA;Aep/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;Afs/BA;Aep/BA;Afs/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AgBljCA;AhBojCA;AgBljCA;AACA;AACA;AhBojCA;AgBljCA;AACA;AACA;AACA;AhBojCA;AgBljCA;AACA;AACA;AACA;AACA,SAAC;AhBojCD;AACA,OAAO;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AiB3kCA;AjB6kCA;AiB3kCA;AACA;AACA;AjB6kCA;AiB3kCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AjB6kCA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AkB7mCb;AlB+mCA;AkB7mCA;AACA;AACA;AlB+mCA;AkB7mCA;AACA;AACA;AACA,aAAC;AlB+mCD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AmBhoCA;AnBkoCA;AmBhoCA;AACA;AACA;AnBkoCA;AmBhoCA;AACA;AACA;AACA;AACA;AACA;AACA;AnBkoCA;AmBhoCA;AACA;AACA;AnBkoCA;AmBhoCA;AACA;AACA;AACA;AnBkoCA;AACA;AmBhoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAS;AnBkoCT;AmBhoCA;AACA;AnBkoCA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AoB9qCA;ApBgrCA;AoB9qCA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;AACA;ApBgrCA,aAAa;AoB9qCb;AACA;AACA;AACA,aAAK;AACL;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;AACA;AACA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;AACA;AACA;AACA;AACA;ApBgrCA,aAAa;AoB9qCb;ApBgrCA,aAAa;AoB9qCb;AACA;AACA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA,aAAK;AACL;AACA;AACA;ApBgrCA,SAAS;AoB9qCT;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAO;ApBgrCP;AoB9qCA;AACA;AACA;ApBgrCA;AoB9qCA,eAAS;ApBgrCT;AoB9qCA;AACA;AACA;AACA,WAAK;AACL;ApBgrCA;AoB9qCA;AACA;AACA;AACA;AACA;AACA;ApBgrCA;AoB9qCA;ApBgrCA,aAAa;AoB9qCb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;ApBgrCA,OAAO;AACP,GAAG;AoB9qCH;AACA;AACA;AACA;AACA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ApBgrCA;AoB9qCA;AACA;AACA;AACA;AACA;AACA","file":"qibud-mods.js","sourcesContent":["/******/\n(function (modules) {\n  // webpackBootstrap\n  /******/\n  // The module cache\n  /******/\n  var installedModules = {};\n  /******/\n  /******/\n  // The require function\n  /******/\n  function __webpack_require__(moduleId) {\n    /******/\n    /******/\n    // Check if module is in cache\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    /******/\n    // Create a new module (and put it into the cache)\n    /******/\n    var module = installedModules[moduleId] = {\n        exports: {},\n        id: moduleId,\n        loaded: false\n      };\n    /******/\n    /******/\n    // Execute the module function\n    /******/\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    /******/\n    // Flag the module as loaded\n    /******/\n    module.loaded = true;\n    /******/\n    /******/\n    // Return the exports of the module\n    /******/\n    return module.exports;  /******/\n  }\n  /******/\n  /******/\n  /******/\n  // expose the modules object (__webpack_modules__)\n  /******/\n  __webpack_require__.m = modules;\n  /******/\n  /******/\n  // expose the module cache\n  /******/\n  __webpack_require__.c = installedModules;\n  /******/\n  /******/\n  // __webpack_public_path__\n  /******/\n  __webpack_require__.p = '';\n  /******/\n  /******/\n  // Load entry module and return exports\n  /******/\n  return __webpack_require__(0);  /******/\n}([\n  function (module, exports, __webpack_require__) {\n    __webpack_require__(1);\n    __webpack_require__(2);\n    __webpack_require__(3);\n    __webpack_require__(4);\n    __webpack_require__(5);\n    __webpack_require__(6);\n    __webpack_require__(7);\n    __webpack_require__(8);\n    __webpack_require__(9);\n    __webpack_require__(10);\n    __webpack_require__(11);\n    __webpack_require__(12);\n    __webpack_require__(13);\n    __webpack_require__(14);\n    __webpack_require__(15);\n    __webpack_require__(16);\n    __webpack_require__(17);\n    __webpack_require__(18);\n    __webpack_require__(19);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    'use strict';\n    /**\r\n\t * Module definition for common components used by other all other app modules.\r\n\t */\n    angular.module('qibud.common', ['ui.bootstrap']);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    angular.module('qibud.common').controller('SearchCtrl', [\n      '$scope',\n      'api',\n      function ($scope, api) {\n        $scope.results = {};\n        $scope.search = function (query) {\n          if (query) {\n            api.buds.search(query).success(function (results) {\n              if (results.hits) {\n                if (results.hits.total > 0) {\n                  $scope.results = results.hits.hits.map(function (item) {\n                    return item;\n                  });\n                } else {\n                  $scope.results = {};\n                }\n              }\n            });\n          }\n        };\n      }\n    ]);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    angular.module('qibud.common').controller('MailboxCtrl', [\n      '$scope',\n      '$modal',\n      'api',\n      function ($scope, $modal, api) {\n        $scope.emails = {};\n        api.mailboxes.get().success(function (emails) {\n          $scope.emails = emails;\n        });\n        $scope.openEmail = function (email) {\n          var modalInstance = $modal.open({\n              templateUrl: 'mail.html',\n              controller: 'MailConverterCtrl',\n              size: 'lg',\n              resolve: {\n                email: function () {\n                  return email;\n                }\n              }\n            });\n          modalInstance.result.then(function (budId) {\n          }, function () {\n          });\n        };\n      }\n    ]);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    angular.module('qibud.common').controller('MailConverterCtrl', [\n      '$scope',\n      '$modalInstance',\n      'email',\n      function ($scope, $modalInstance, email) {\n        $scope.email = email;\n        $scope.ok = function () {\n          $modalInstance.close($scope.selectedUsers);\n        };\n        $scope.cancel = function () {\n          $modalInstance.dismiss('cancel');\n        };\n      }\n    ]);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    'use strict';\n    /**\r\n\t * Service for providing access the backend API via HTTP and WebSockets.\r\n\t */\n    angular.module('qibud.common').factory('api', [\n      '$rootScope',\n      '$http',\n      '$window',\n      function ($rootScope, $http, $window) {\n        var apiBase = 'api', token = $window.sessionStorage.token || $window.localStorage.token, headers = { Authorization: 'Bearer ' + token }, wsHost = ($window.document.location.origin || $window.location.protocol + '//' + $window.location.host).replace(/^http/, 'ws'), api = { events: {} };\n        // initiate the websocket connection to the host\n        var ws = api.ws = new WebSocket(wsHost + '?access_token=' + token);\n        $window.setInterval(function () {\n          ws.send('ping');\n        }, 1000 * 25);\n        // keep-alive signal (needed for heroku)\n        // utilize jQuery's callbacks as an event system\n        function event() {\n          var callbacks = $.Callbacks();\n          return {\n            subscribe: function ($scope, fn) {\n              if (fn) {\n                // unsubscribe from event on controller destruction to prevent memory leaks\n                $scope.$on('$destroy', function () {\n                  callbacks.remove(fn);\n                });\n              } else {\n                fn = $scope;\n              }\n              callbacks.add(fn);\n            },\n            unsubscribe: callbacks.remove,\n            publish: callbacks.fire\n          };\n        }\n        // websocket connected disconnected events\n        api.connected = event();\n        ws.onopen = function () {\n          api.connected.publish.apply(this, arguments);\n          $rootScope.$apply();\n        };\n        api.disconnected = event();\n        ws.onclose = function () {\n          api.disconnected.publish.apply(this, arguments);\n          $rootScope.$apply();\n        };\n        // api http endpoints and websocket events\n        api.buds = {\n          search: function (query) {\n            return $http({\n              method: 'GET',\n              url: apiBase + '/buds/search/' + query,\n              headers: headers\n            });\n          },\n          childrenByType: function (budId, type) {\n            return $http({\n              method: 'GET',\n              url: apiBase + '/buds/' + budId + '/child/' + type,\n              headers: headers\n            });\n          },\n          list: function () {\n            return $http({\n              method: 'GET',\n              url: apiBase + '/buds',\n              headers: headers\n            });\n          },\n          view: function (budId) {\n            return $http({\n              method: 'GET',\n              url: apiBase + '/buds/' + budId + '/view',\n              headers: headers\n            });\n          },\n          update: function (bud) {\n            return $http({\n              method: 'PUT',\n              url: apiBase + '/buds/' + bud.id + '/update',\n              data: bud,\n              headers: headers\n            });\n          },\n          updated: event(),\n          delete: function (budId) {\n            return $http({\n              method: 'DELETE',\n              url: apiBase + '/buds/' + budId,\n              headers: headers\n            });\n          },\n          create: function (bud) {\n            return $http({\n              method: 'POST',\n              url: apiBase + '/buds',\n              data: bud,\n              headers: headers\n            });\n          },\n          createSub: function (parentBudId, bud) {\n            return $http({\n              method: 'POST',\n              url: apiBase + '/buds/' + parentBudId,\n              data: bud,\n              headers: headers\n            });\n          },\n          created: event(),\n          evolve: function (budId, type) {\n            return $http({\n              method: 'PUT',\n              url: apiBase + '/buds/' + budId + '/evolve/' + type,\n              headers: headers\n            });\n          },\n          evolved: event(),\n          follow: function (bud) {\n            return $http({\n              method: 'PUT',\n              url: apiBase + '/buds/' + bud.id + '/follow',\n              data: bud,\n              headers: headers\n            });\n          },\n          unfollow: function (bud) {\n            return $http({\n              method: 'PUT',\n              url: apiBase + '/buds/' + bud.id + '/unfollow',\n              data: bud,\n              headers: headers\n            });\n          },\n          followersChanged: event(),\n          sponsor: function (bud) {\n            return $http({\n              method: 'PUT',\n              url: apiBase + '/buds/' + bud.id + '/sponsor',\n              data: bud,\n              headers: headers\n            });\n          },\n          unsponsor: function (bud) {\n            return $http({\n              method: 'PUT',\n              url: apiBase + '/buds/' + bud.id + '/unsponsor',\n              data: bud,\n              headers: headers\n            });\n          },\n          sponsorsChanged: event(),\n          support: function (bud, value) {\n            return $http({\n              method: 'PUT',\n              url: apiBase + '/buds/' + bud.id + '/support/' + value,\n              data: bud,\n              headers: headers\n            });\n          },\n          unsupport: function (bud) {\n            return $http({\n              method: 'PUT',\n              url: apiBase + '/buds/' + bud.id + '/unsupport',\n              data: bud,\n              headers: headers\n            });\n          },\n          supportersChanged: event(),\n          share: function (bud, users) {\n            return $http({\n              method: 'PUT',\n              url: apiBase + '/buds/' + bud.id + '/share',\n              data: users,\n              headers: headers\n            });\n          },\n          budPacksData: {\n            create: function (budId, packData, type) {\n              return $http({\n                method: 'POST',\n                url: apiBase + '/buds/' + budId + '/packdata/' + type,\n                data: packData,\n                headers: headers\n              });\n            },\n            get: function (budId, type) {\n              return $http({\n                method: 'GET',\n                url: apiBase + '/buds/' + budId + '/packdata/' + type,\n                headers: headers\n              });\n            },\n            set: function (budId, packData, type) {\n              return $http({\n                method: 'PUT',\n                url: apiBase + '/buds/' + budId + '/packdata/' + type,\n                data: packData,\n                headers: headers\n              });\n            },\n            created: event(),\n            updated: event()\n          },\n          comments: {\n            create: function (budId, comment) {\n              return $http({\n                method: 'POST',\n                url: apiBase + '/buds/' + budId + '/comments',\n                data: comment,\n                headers: headers\n              });\n            },\n            created: event()\n          }\n        };\n        api.qi = { updated: event() };\n        api.mailboxes = {\n          get: function () {\n            return $http({\n              method: 'GET',\n              url: apiBase + '/user/mailboxes/emails',\n              headers: headers\n            });\n          },\n          incoming: event()\n        };\n        api.links = {\n          createB2B: function (budId, type, budId2) {\n            return $http({\n              method: 'POST',\n              url: apiBase + '/links/b2b/' + budId + '/' + type + '/' + budId2,\n              headers: headers\n            });\n          },\n          createB2U: function (budId, type, userId) {\n            return $http({\n              method: 'POST',\n              url: apiBase + '/links/b2u/' + budId + '/' + type + '/' + userId,\n              headers: headers\n            });\n          },\n          createU2B: function (userId, type, budId) {\n            return $http({\n              method: 'POST',\n              url: apiBase + '/links/u2b/' + userId + '/' + type + '/' + budId,\n              headers: headers\n            });\n          },\n          deleteU2B: function (userId, type, budId) {\n            return $http({\n              method: 'DELETE',\n              url: apiBase + '/links/u2b/' + userId + '/' + type + '/' + budId,\n              headers: headers\n            });\n          },\n          findU2B: function (userId, type) {\n            return $http({\n              method: 'GET',\n              url: apiBase + '/links/u2b/' + userId + '/' + type,\n              headers: headers\n            });\n          }\n        };\n        api.users = {\n          list: function () {\n            return $http({\n              method: 'GET',\n              url: apiBase + '/users',\n              headers: headers\n            });\n          }\n        };\n        api.actors = {\n          list: function () {\n            return $http({\n              method: 'GET',\n              url: apiBase + '/actors',\n              headers: headers\n            });\n          }\n        };\n        api.events = {\n          list: function () {\n            return $http({\n              method: 'GET',\n              url: apiBase + '/events',\n              headers: headers\n            });\n          }\n        };\n        api.types = {\n          get: function (type) {\n            return $http({\n              method: 'GET',\n              url: apiBase + '/types/' + type,\n              headers: headers\n            });\n          },\n          list: function () {\n            return $http({\n              method: 'GET',\n              url: apiBase + '/types',\n              headers: headers\n            });\n          }\n        };\n        api.debug = {\n          clearDatabase: function () {\n            return $http({\n              method: 'POST',\n              url: apiBase + '/debug/clearDatabase',\n              headers: headers\n            });\n          }\n        };\n        // websocket data event (which transmits json-rpc payloads)\n        function index(obj, i) {\n          return obj[i];\n        }\n        // convert dot notation string into an actual object index\n        ws.onmessage = function (event) {\n          var data = JSON.parse(event.data);\n          if (!data.method) {\n            throw 'Malformed event data received through WebSocket. Received event data object was: ' + data;\n          } else if (!data.method.split('.').reduce(index, api)) {\n            throw 'Undefined event type received through WebSocket. Received event data object was: ' + data;\n          }\n          data.method.split('.').reduce(index, api).publish(data.params);\n          $rootScope.$apply();\n        };\n        return api;\n      }\n    ]);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    angular.module('qibud.dashboard', []).controller('DashboardCtrl', [\n      '$scope',\n      '$cookieStore',\n      DashboardCtrl\n    ]);\n    function DashboardCtrl($scope, $cookieStore) {\n      /**\n\t     * Sidebar Toggle & Cookie Control\n\t     *\n\t     */\n      var mobileView = 992;\n      $scope.getWidth = function () {\n        return window.innerWidth;\n      };\n      $scope.$watch($scope.getWidth, function (newValue, oldValue) {\n        if (newValue >= mobileView) {\n          if (angular.isDefined($cookieStore.get('toggle'))) {\n            if ($cookieStore.get('toggle') == false) {\n              $scope.toggle = false;\n            } else {\n              $scope.toggle = true;\n            }\n          } else {\n            $scope.toggle = true;\n          }\n        } else {\n          $scope.toggle = false;\n        }\n      });\n      $scope.toggleSidebar = function () {\n        $scope.toggle = !$scope.toggle;\n        $cookieStore.put('toggle', $scope.toggle);\n      };\n      window.onresize = function () {\n        $scope.$apply();\n      };\n    }  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    'use strict';\n    /**\r\n\t * Editor module for buds\r\n\t */\n    angular.module('qibud.editor', [\n      'ui.router',\n      'qibud.common'\n    ]).config([\n      '$stateProvider',\n      '$urlRouterProvider',\n      function ($stateProvider, $urlRouterProvider) {\n        $stateProvider.state('bud.editor', {\n          title: 'Qibud Editor',\n          url: '/editor/:budId/:parentBudId/:content',\n          breadcrumb: {\n            class: 'highlight',\n            text: 'Bud Editor',\n            stateName: 'bud.editor'\n          },\n          templateUrl: 'modules/editor/editor.html',\n          controller: 'EditorCtrl'\n        });\n      }\n    ]);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    'use strict';\n    /**\r\n\t * Editor controller provide a good way to edit/write buds\r\n\t */\n    angular.module('qibud.editor').controller('EditorCtrl', [\n      '$scope',\n      '$state',\n      '$stateParams',\n      '$modal',\n      '$location',\n      'api',\n      function ($scope, $state, $stateParams, $modal, $location, api) {\n        var user = $scope.common.user;\n        if ($stateParams.budId) {\n          api.buds.view($stateParams.budId).success(function (bud) {\n            $scope.editedBud = bud;\n            $scope.budBox = {\n              title: bud.title,\n              content: bud.content,\n              privacy: bud.privacy,\n              type: bud.type,\n              disabled: false,\n              action: 'update'\n            };\n            $scope.setType(bud.type);\n          });\n        } else {\n          $scope.budBox = {\n            title: null,\n            content: null,\n            type: 'Bud',\n            disabled: false,\n            privacy: 'Private',\n            action: 'create'\n          };\n        }\n        if ($stateParams.parentBudId) {\n          api.buds.view($stateParams.parentBudId).success(function (bud) {\n            $scope.parentBud = bud;\n          });\n          $scope.budBox.action = 'subbud';\n        }\n        if ($stateParams.content) {\n          $scope.budBox.content = $stateParams.content;\n        }\n        $scope.editorOptions = { uiColor: '#000000' };\n        $scope.setType = function (type) {\n          if (type === 'Bud') {\n            $state.go('bud.editor');\n          } else {\n            $state.go('bud.editor.' + type);\n          }\n        };\n        // add bud creation functions to scope\n        $scope.createBud = function ($event) {\n          // don't let the user type in blank lines or submit empty/whitespace only bud, or type in something when bud is being created\n          if (!$scope.budBox.content.length || $scope.budBox.disabled) {\n            $event.preventDefault();\n            return;\n          }\n          var modalInstance = $modal.open({\n              templateUrl: 'evolvebox.html',\n              controller: 'EvolveCtrl',\n              size: 'lg',\n              resolve: {\n                availableTypes: function () {\n                  return $scope.common.availableTypes;\n                }\n              }\n            });\n          var createSubBud = function (selectedType) {\n            // disable the bud box and push the new bud to server\n            $scope.budBox.disabled = true;\n            api.buds.createSub($scope.parentBud.id, {\n              title: $scope.budBox.title,\n              content: $scope.budBox.content,\n              privacy: $scope.budBox.privacy,\n              type: $scope.budBox.type\n            }).success(function (budId) {\n              // clear the bud box and enable it\n              $scope.budBox.title = '';\n              $scope.budBox.content = '';\n              $scope.budBox.disabled = false;\n              console.info('subbud created');\n              if (selectedType !== null) {\n                //evolve if needed\n                api.buds.evolve(budId, selectedType).success(function () {\n                  console.info('bud evolve in ' + selectedType);\n                  $state.go('bud.viewer.' + selectedType, { budId: budId }, { reload: true });\n                });\n              } else {\n                $state.go('bud.viewer', { budId: budId }, { reload: true });\n              }\n            }).error(function () {\n              // don't clear the bud box but enable it so the user can re-try\n              $scope.budBox.disabled = false;\n            });\n          };\n          var createBud = function (selectedType) {\n            // disable the bud box and push the new bud to server\n            $scope.budBox.disabled = true;\n            api.buds.create({\n              title: $scope.budBox.title,\n              content: $scope.budBox.content,\n              privacy: $scope.budBox.privacy,\n              type: $scope.budBox.type\n            }).success(function (budId) {\n              // clear the bud box and enable it\n              $scope.budBox.title = '';\n              $scope.budBox.content = '';\n              $scope.budBox.disabled = false;\n              console.info('bud created');\n              if (selectedType !== null) {\n                //evolve if needed\n                api.buds.evolve(budId, selectedType).success(function () {\n                  console.info('bud evolve in ' + selectedType);\n                  $state.go('bud.viewer.' + selectedType, { budId: budId }, { reload: true });\n                });\n              } else {\n                $state.go('bud.viewer', { budId: budId }, { reload: true });\n              }\n            }).error(function () {\n              // don't clear the bud box but enable it so the user can re-try\n              $scope.budBox.disabled = false;\n            });\n          };\n          modalInstance.result.then(function (selectedType) {\n            if ($scope.parentBud.id) {\n              createSubBud(selectedType);\n            } else {\n              createBud(selectedType);\n            }\n          }, function () {\n            if ($scope.parentBud.id) {\n              createSubBud(null);\n            } else {\n              createBud(null);\n            }\n          });\n        };\n        $scope.updateBud = function ($event) {\n          // don't let the user type in blank lines or submit empty/whitespace only bud, or type in something when bud is being created\n          if (!$scope.budBox.content.length || $scope.budBox.disabled) {\n            $event.preventDefault();\n            return;\n          }\n          // disable the bud box and push the new bud to server\n          $scope.budBox.disabled = true;\n          $scope.editedBud.title = $scope.budBox.title;\n          $scope.editedBud.content = $scope.budBox.content;\n          $scope.editedBud.privacy = $scope.budBox.privacy;\n          $scope.editedBud.type = $scope.budBox.type === 'Bud' ? '' : $scope.budBox.type;\n          api.buds.update($scope.editedBud).success(function (bud) {\n            //redirect\n            $state.go('bud.viewer', { budId: $scope.editedBud.id }, { reload: true });\n          }).error(function () {\n            // don't clear the bud box but enable it so the user can re-try\n            $scope.budBox.disabled = false;\n          });\n        };\n        // subscribe to websocket events to receive new buds, comments, etc.\n        api.buds.created.subscribe($scope, function (bud) {\n        });\n      }\n    ]);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    'use strict';\n    angular.module('qibud.editor').controller('EvolveCtrl', [\n      '$scope',\n      '$modalInstance',\n      'availableTypes',\n      function ($scope, $modalInstance, availableTypes) {\n        $scope.availableTypes = availableTypes;\n        $scope.selectedType = 'Bud';\n        $scope.setSelected = function (type) {\n          $scope.selectedType = type;\n        };\n        $scope.ok = function () {\n          $modalInstance.close($scope.selectedType);\n        };\n        $scope.cancel = function () {\n          $modalInstance.dismiss('cancel');\n        };\n      }\n    ]);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    'use strict';\n    /**\r\n\t * Home module for displaying home page content.\r\n\t */\n    angular.module('qibud.home', [\n      'ui.router',\n      'qibud.common'\n    ]).config([\n      '$stateProvider',\n      '$urlRouterProvider',\n      function ($stateProvider, $urlRouterProvider) {\n        $stateProvider.state('home.stickers', {\n          title: 'Dashboard',\n          breadcrumb: {\n            class: 'highlight',\n            text: 'Bud stickers',\n            stateName: 'bud.home.stickers'\n          },\n          url: '/stickers',\n          templateUrl: 'modules/home/home-stickers.html',\n          controller: 'HomeCtrl'\n        }).state('home.budgraph', {\n          title: 'Bud Graph',\n          breadcrumb: {\n            class: 'highlight',\n            text: 'Bud Graph',\n            stateName: 'bud.home.budgraph'\n          },\n          url: '/graph',\n          templateUrl: 'modules/home/home-budgraph.html',\n          controller: 'BudgraphCtrl'\n        }).state('home.timeline', {\n          title: 'Bud Timeline',\n          breadcrumb: {\n            class: 'highlight',\n            text: 'Bud Timeline',\n            stateName: 'bud.home.timeline'\n          },\n          url: '/timeline',\n          templateUrl: 'modules/home/home-timeline.html',\n          controller: 'TimelineCtrl'\n        });\n      }\n    ]);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    'use strict';\n    /**\r\n\t * Home controller simply lists all the buds from everyone on the front page.\r\n\t */\n    angular.module('qibud.home').controller('HomeCtrl', [\n      '$scope',\n      '$state',\n      'api',\n      'budGraph',\n      function ($scope, $state, api, budGraph) {\n        var user = $scope.common.user;\n        api.buds.list().success(function (buds) {\n          $scope.buds = buds;\n          api.links.findU2B(user.id, 'ACTOR').success(function (buds) {\n            buds.forEach(function (bud) {\n              _.remove($scope.buds, function (b) {\n                return b.id === bud._id;\n              });\n            });\n            $scope.budsActingOn = buds;\n          });\n        });\n        // subscribe to websocket events to receive new buds, comments, etc.\n        api.buds.created.subscribe($scope, function (bud) {\n          // only add the bud if we don't have it already in the buds list to avoid dupes\n          if (!_.some($scope.buds, function (b) {\n              return b.id === bud.id;\n            })) {\n            $scope.buds.unshift(bud);\n          }\n        });\n      }\n    ]);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    'use strict';\n    /**\r\n\t * Home module for displaying home page content.\r\n\t */\n    angular.module('qibud.home').factory('budGraph', [\n      '$q',\n      function ($q) {\n        var cy;\n        var budGraph = function (buds) {\n          var deferred = $q.defer();\n          // put buds model in cy.js\n          var eles = [];\n          for (var i = 0; i < buds.length; i++) {\n            var bud = buds[i];\n            var info;\n            if (bud.dataCache.state) {\n              info = '[' + bud.type + '] ' + bud.dataCache.state;\n            } else {\n              info = bud.title;\n            }\n            eles.push({\n              group: 'nodes',\n              data: {\n                id: bud.id,\n                type: bud.typeInfo,\n                weight: bud.qi,\n                size: 200,\n                label: { content: bud.type },\n                name: info,\n                faveColor: '#30426a',\n                faveShape: 'roundrectangle'\n              }\n            });\n          }\n          for (var i = 0; i < buds.length; i++) {\n            if (buds[i].subBuds) {\n              for (var s = 0; s < buds[i].subBuds.length; s++) {\n                eles.push({\n                  group: 'edges',\n                  data: {\n                    source: buds[i].id,\n                    target: buds[i].subBuds[s].id,\n                    faveColor: '#30426a',\n                    strength: 1\n                  }\n                });\n              }\n            }\n          }\n          $(function () {\n            // on dom ready\n            cy = cytoscape({\n              container: $('#cy')[0],\n              style: cytoscape.stylesheet().selector('node').css({\n                'shape': 'data(faveShape)',\n                'width': 'data(size)',\n                'height': 100,\n                'content': 'data(name)',\n                'text-valign': 'center',\n                'text-outline-width': 2,\n                'background-color': 'data(faveColor)',\n                'color': '#fff',\n                'box-shadow': '0 10px 18px rgba(0,0,0,.22),0 14px 45px rgba(0,0,0,.25)'\n              }).selector(':selected').css({\n                'border-width': 3,\n                'border-color': '#333'\n              }).selector('edge').css({\n                'opacity': 0.666,\n                'width': 'mapData(strength, 35, 50, 2, 6)',\n                'target-arrow-shape': 'triangle',\n                'source-arrow-shape': 'circle',\n                'line-color': 'data(faveColor)',\n                'source-arrow-color': 'data(faveColor)',\n                'target-arrow-color': 'data(faveColor)'\n              }).selector('.faded').css({\n                'opacity': 0.25,\n                'text-opacity': 0\n              }),\n              layout: {\n                name: 'breadthfirst',\n                directed: true,\n                padding: 5\n              },\n              elements: eles,\n              ready: function () {\n                deferred.resolve(this);\n                cy.on('cxtdrag', 'node', function (e) {\n                  var node = this;\n                });\n                cy.on('tap', 'node', function (e) {\n                  var node = this;\n                  fire('onClick', [node.id()]);\n                });\n              }\n            });\n          });\n          // on dom ready\n          return deferred.promise;\n        };\n        budGraph.listeners = {};\n        function fire(e, args) {\n          var listeners = budGraph.listeners[e];\n          for (var i = 0; listeners && i < listeners.length; i++) {\n            var fn = listeners[i];\n            fn.apply(fn, args);\n          }\n        }\n        function listen(e, fn) {\n          var listeners = budGraph.listeners[e] = budGraph.listeners[e] || [];\n          listeners.push(fn);\n        }\n        budGraph.onClick = function (fn) {\n          listen('onClick', fn);\n        };\n        return budGraph;\n      }\n    ]);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    'use strict';\n    /**\r\n\t * Home controller simply lists all the buds from everyone on the front page.\r\n\t */\n    angular.module('qibud.home').controller('BudgraphCtrl', [\n      '$scope',\n      '$state',\n      'api',\n      'budGraph',\n      function ($scope, $state, api, budGraph) {\n        var user = $scope.common.user;\n        var cy;\n        // maybe you want a ref to cy\n        // (usually better to have the srv as intermediary)\n        var budsById = {};\n        // retrieve buds from server\n        api.buds.list().success(function (buds) {\n          $scope.buds = buds;\n          for (var i = 0; i < $scope.buds.length; i++) {\n            var p = $scope.buds[i];\n            budsById[p.id] = p;\n          }\n          // you would probably want some ui to prevent use of budsCtrl until cy is loaded\n          budGraph($scope.buds).then(function (budsCy) {\n            cy = budsCy;\n            // use this variable to hide ui until cy loaded if you want\n            $scope.cyLoaded = true;\n          });\n        });\n        budGraph.onClick(function (id) {\n          $state.go('bud.viewer', { budId: id });\n        });\n        // subscribe to websocket events to receive new buds, comments, etc.\n        api.buds.created.subscribe($scope, function (bud) {\n          // only add the bud if we don't have it already in the buds list to avoid dupes\n          if (!_.some($scope.buds, function (b) {\n              return b.id === bud.id;\n            })) {\n            bud.comments = [];\n            bud.commentBox = {\n              message: '',\n              disabled: false\n            };\n            $scope.buds.unshift(bud);\n          }\n        });\n      }\n    ]);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    'use strict';\n    /**\r\n\t *\r\n\t */\n    angular.module('qibud.home').controller('TimelineCtrl', [\n      '$scope',\n      '$state',\n      'api',\n      'budGraph',\n      function ($scope, $state, api, budGraph) {\n        var user = $scope.common.user;\n        api.events.list().success(function (events) {\n          $scope.events = events;\n        });\n      }\n    ]);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    'use strict';\n    /**\r\n\t * Profile module for user profile and related content.\r\n\t */\n    angular.module('qibud.profile', [\n      'ui.router',\n      'qibud.common'\n    ]).config([\n      '$stateProvider',\n      '$urlRouterProvider',\n      function ($stateProvider, $urlRouterProvider) {\n        $stateProvider.state('bud.profile', {\n          url: '/profile',\n          title: 'User Profile',\n          breadcrumb: {\n            class: 'highlight',\n            text: 'User Profile',\n            stateName: 'bud.profile'\n          },\n          templateUrl: 'modules/profile/profile.html',\n          controller: 'ProfileCtrl'\n        });\n      }\n    ]);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    'use strict';\n    /**\r\n\t * Profile controller gives the user the means to view/edit their public profile info.\r\n\t */\n    angular.module('qibud.profile').controller('ProfileCtrl', [\n      '$scope',\n      function ($scope) {\n        // 'common' variable is always added to the root scope and it contains common things like user info, common functions etc.\n        $scope.user = $scope.common.user;\n      }\n    ]);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    'use strict';\n    /**\r\n\t * Editor module for buds\r\n\t */\n    angular.module('qibud.viewer', [\n      'ui.router',\n      'ui.bootstrap',\n      'qibud.common'\n    ]).config([\n      '$stateProvider',\n      '$urlRouterProvider',\n      function ($stateProvider, $urlRouterProvider) {\n        var types = ['Team'];\n        var states = [];\n        var availableViews = {};\n        availableViews['@'] = {\n          controller: 'ViewerCtrl',\n          templateUrl: 'modules/viewer/viewer.html'\n        };\n        states.push({\n          name: 'bud.viewer',\n          sticky: true,\n          url: '/viewer/:budId',\n          views: availableViews,\n          breadcrumb: {\n            class: 'highlight',\n            text: 'Bud Viewer',\n            stateName: 'bud.viewer'\n          }\n        });\n        angular.forEach(states, function (state) {\n          $stateProvider.state(state);\n        });\n      }\n    ]);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    'use strict';\n    /**\r\n\t * Viewer controller provide a good way to read buds\r\n\t */\n    angular.module('qibud.viewer').controller('ViewerCtrl', [\n      '$scope',\n      '$state',\n      '$stateParams',\n      '$modal',\n      'api',\n      function ($scope, $state, $stateParams, $modal, api) {\n        var user = $scope.common.user;\n        $scope.typeInfo = null;\n        $scope.ready = false;\n        $scope.actionInProgress = false;\n        $scope.followersCount = 0;\n        $scope.sponsorsCount = 0;\n        $scope.supportersCount = 0;\n        $scope.supportValue = 0;\n        $scope.shareCount = 0;\n        // retrieve one bud from server\n        $scope.load = function (callback) {\n          console.info('loading...');\n          $scope.ready = false;\n          api.buds.view($stateParams.budId).success(function (bud) {\n            bud.commentBox = {\n              message: '',\n              disabled: false\n            };\n            bud.comments = bud.comments || [];\n            $scope.bud = bud;\n            if (bud.followers) {\n              $scope.followersCount = bud.followers.length;\n              if (bud.followers.indexOf(user.id) !== -1) {\n                $scope.follower = true;\n              } else {\n                $scope.follower = false;\n              }\n            } else {\n              $scope.follower = false;\n            }\n            if (bud.sponsors) {\n              $scope.sponsorsCount = bud.sponsors.length;\n              if (bud.sponsors.indexOf(user.id) !== -1) {\n                $scope.sponsorer = true;\n              } else {\n                $scope.sponsorer = false;\n              }\n            } else {\n              $scope.sponsorer = false;\n            }\n            if (bud.supporters) {\n              $scope.supportersCount = bud.supporters.length;\n              if (bud.supporters.indexOf(user.id) !== -1) {\n                $scope.supporter = true;\n              } else {\n                $scope.supporter = false;\n              }\n            } else {\n              $scope.supporter = false;\n            }\n            if (bud.shares) {\n              $scope.shareCount = bud.shares.length;\n            }\n            $scope.ready = true;\n            $scope.showType($scope.bud.type, false);\n            console.info('loaded!');\n            if (callback) {\n              callback();\n            }\n          });\n        };\n        //Init view\n        $scope.load();\n        $scope.showType = function (type, reload) {\n          if (type !== 'Bud') {\n            $state.go('bud.viewer.' + type, $state.params, { reload: reload });\n          } else {\n            $state.go('bud.viewer', $state.params, { reload: reload });\n          }\n        };\n        $scope.evolve = function ($event, type) {\n          if ($scope.actionInProgress) {\n            $event.preventDefault();\n            return;\n          }\n          $scope.actionInProgress = true;\n          api.buds.evolve($scope.bud, type).success(function () {\n            $scope.actionInProgress = false;\n          }).error(function () {\n            $scope.actionInProgress = false;\n          });\n        };\n        $scope.canEvolve = function () {\n          if (!$scope.bud) {\n            return false;\n          }\n          if ($scope.bud.type === 'Bud' && $scope.bud.creator.id === user.id) {\n            return true;\n          } else {\n            return false;\n          }\n        };\n        $scope.editSubBud = function () {\n          $state.go('bud.editor', { parentBud: $scope.bud });\n        };\n        $scope.budify = function (content) {\n          $state.go('bud.editor', {\n            parentBud: $scope.bud,\n            content: content\n          });\n        };\n        $scope.delete = function () {\n          api.buds.delete($scope.bud.id).success(function () {\n            $state.go('home.stickers');\n          });\n        };\n        $scope.canDelete = function () {\n          if (!$scope.bud) {\n            return false;\n          }\n          var goodUser = $scope.bud.creator.id == $scope.common.user.id;\n          var noSubBuds = !$scope.bud.subBuds || $scope.bud.subBuds.length == 0;\n          return goodUser && noSubBuds;\n        };\n        $scope.share = function () {\n          api.actors.list().success(function (actors) {\n            var modalInstance = $modal.open({\n                templateUrl: 'sharebox.html',\n                controller: 'ShareboxCtrl',\n                size: 'lg',\n                resolve: {\n                  users: function () {\n                    return actors.users;\n                  },\n                  teams: function () {\n                    return actors.teams;\n                  }\n                }\n              });\n            modalInstance.result.then(function (actors) {\n              //share to ->\n              api.buds.share($scope.bud, actors).success(function (bud) {\n              });\n            }, function () {\n            });\n          });\n        };\n        $scope.canShare = function () {\n          var sharable = false;\n          if (!$scope.bud) {\n            return sharable;\n          }\n          var creatorId = $scope.bud.creator.id;\n          //TODO: Add a watch on privacy changes check actor\n          switch ($scope.bud.privacy) {\n          case 'Private':\n            if (creatorId === user.id) {\n              sharable = true;\n            }\n            break;\n          case 'Private2Share':\n            if (creatorId === user.id) {\n              sharable = true;\n            }\n            break;\n          case 'Free2Share':\n            sharable = true;\n            break;\n          }\n          return sharable;\n        };\n        $scope.followBud = function ($event) {\n          if ($scope.actionInProgress) {\n            $event.preventDefault();\n            return;\n          }\n          $scope.actionInProgress = true;\n          if (!$scope.follower) {\n            api.buds.follow($scope.bud).success(function (budId) {\n              $scope.actionInProgress = false;\n            }).error(function () {\n              $scope.actionInProgress = false;\n            });\n          } else {\n            api.buds.unfollow($scope.bud).success(function (budId) {\n              $scope.actionInProgress = false;\n            }).error(function () {\n              $scope.actionInProgress = false;\n            });\n          }\n        };\n        $scope.supportBud = function ($event) {\n          if ($scope.actionInProgress) {\n            $event.preventDefault();\n            return;\n          }\n          $scope.actionInProgress = true;\n          if (!$scope.supporter) {\n            api.buds.support($scope.bud, $scope.supportValue).success(function (budId) {\n              $scope.actionInProgress = false;\n            }).error(function () {\n              $scope.actionInProgress = false;\n            });\n          } else {\n            api.buds.unsupport($scope.bud).success(function (budId) {\n              $scope.actionInProgress = false;\n            }).error(function () {\n              $scope.actionInProgress = false;\n            });\n          }\n        };\n        $scope.sponsorBud = function ($event) {\n          if ($scope.actionInProgress) {\n            $event.preventDefault();\n            return;\n          }\n          $scope.actionInProgress = true;\n          if (!$scope.sponsorer) {\n            api.buds.sponsor($scope.bud).success(function (budId) {\n              $scope.actionInProgress = false;\n            }).error(function () {\n              $scope.actionInProgress = false;\n            });\n          } else {\n            api.buds.unsponsor($scope.bud).success(function (budId) {\n              $scope.actionInProgress = false;\n            }).error(function () {\n              $scope.actionInProgress = false;\n            });\n          }\n        };\n        api.buds.followersChanged.subscribe($scope, function (bud) {\n          if ($scope.bud.id === bud.id) {\n            $scope.bud.followers = bud.followers;\n            $scope.followersCount = bud.followers.length;\n            if (bud.followers.indexOf(user.id) !== -1) {\n              $scope.follower = true;\n            } else {\n              $scope.follower = false;\n            }\n          }\n        });\n        api.buds.supportersChanged.subscribe($scope, function (bud) {\n          if ($scope.bud.id === bud.id) {\n            $scope.bud.supporters = bud.supporters;\n            $scope.supportersCount = bud.supporters.length;\n            if (bud.supporters.indexOf(user.id) !== -1) {\n              $scope.supporter = true;\n            } else {\n              $scope.supporter = false;\n            }\n          }\n        });\n        api.buds.sponsorsChanged.subscribe($scope, function (bud) {\n          if ($scope.bud.id === bud.id) {\n            $scope.bud.sponsors = bud.sponsors;\n            $scope.sponsorsCount = bud.sponsors.length;\n            if (bud.sponsors.indexOf(user.id) !== -1) {\n              $scope.sponsorer = true;\n            } else {\n              $scope.sponsorer = false;\n            }\n          }\n        });\n        $scope.createComment = function ($event, bud) {\n          // submit the message in the comment box only if user hits 'Enter (keycode 13)'\n          if ($event.keyCode !== 13) {\n            return;\n          }\n          // don't let the user type in blank lines or submit empty/whitespace only comment, or type in something when comment is being created\n          if (!bud.commentBox.message.length || bud.commentBox.disabled) {\n            $event.preventDefault();\n            return;\n          }\n          // disable the comment box and push the new comment to server\n          bud.commentBox.disabled = true;\n          api.buds.comments.create(bud.id, { message: bud.commentBox.message }).success(function (commentId) {\n            // only add the comment if we don't have it already in the bud's comments list to avoid dupes\n            if (!_.some(bud.comments, function (c) {\n                return c.id === commentId;\n              })) {\n              bud.comments.push({\n                id: commentId,\n                from: user,\n                message: bud.commentBox.message,\n                createdTime: new Date()\n              });\n            }\n            // clear the comment field and enable it\n            bud.commentBox.message = '';\n            bud.commentBox.disabled = false;\n          }).error(function () {\n            // don't clear the comment box but enable it so the user can re-try\n            bud.commentBox.disabled = false;\n          });\n          // prevent default 'Enter' button behavior (create new line) as we want 'Enter' button to do submission\n          $event.preventDefault();\n        };\n        api.buds.comments.created.subscribe($scope, function (comment) {\n          // only add the comment if we don't have it already in the bud's comments list to avoid dupes\n          if ($scope.bud && !_.some($scope.bud.comments, function (c) {\n              return c.id === comment.id;\n            })) {\n            $scope.bud.comments.push(comment);\n          }\n        });\n        api.buds.updated.subscribe($scope, function (bud) {\n          if ($scope.bud.id === bud.id) {\n            $scope.bud = bud;\n            if (bud.shares) {\n              $scope.shareCount = bud.shares.length;\n            }\n          }\n        });\n        api.buds.evolved.subscribe($scope, function (bud) {\n          if ($scope.bud.id === bud.id) {\n            $scope.load();\n          }\n        });\n        api.qi.updated.subscribe($scope, function (bud) {\n          if ($scope.bud.id === bud.id) {\n            $scope.bud.qi = bud.qi;\n          }\n        });\n      }\n    ]);  /***/\n  },\n  function (module, exports, __webpack_require__) {\n    'use strict';\n    angular.module('qibud.viewer').controller('ShareboxCtrl', [\n      '$scope',\n      '$modalInstance',\n      'users',\n      'teams',\n      function ($scope, $modalInstance, users, teams) {\n        $scope.users = users;\n        $scope.teams = teams;\n        $scope.selectedUsers = [];\n        $scope.addUser = function (user) {\n          $scope.selectedUsers.push(user);\n          _.remove($scope.users, function (u) {\n            return u.id === user.id;\n          });\n        };\n        $scope.addTeam = function (team) {\n          angular.forEach(team.members, function (user) {\n            $scope.selectedUsers.push(user);\n            _.remove($scope.users, function (u) {\n              return u.id === user.id;\n            });\n          });\n        };\n        $scope.rmUser = function (user) {\n          $scope.users.push(user);\n          _.remove($scope.selectedUsers, function (u) {\n            return u.id === user.id;\n          });\n        };\n        $scope.ok = function () {\n          $modalInstance.close($scope.selectedUsers);\n        };\n        $scope.cancel = function () {\n          $modalInstance.dismiss('cancel');\n        };\n      }\n    ]);  /***/\n  }  /******/\n]));\n\n\n/** WEBPACK FOOTER **\n ** qibud-mods.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 263fba9d343fc7da96d2\n **/","require('./common/common.js');\nrequire('./common/search-controller.js');\nrequire('./common/mailbox-controller.js');\nrequire('./common/mail-controller.js');\nrequire('./common/api-service.js');\n\nrequire('./dashboard/dashboard.js');\n\nrequire('./editor/editor.js');\nrequire('./editor/editor-controller.js');\nrequire('./editor/editor-evolve-controller.js');\n\nrequire('./home/home.js');\nrequire('./home/home-controller.js');\nrequire('./home/budgraph-factory.js');\nrequire('./home/budgraph-controller.js');\nrequire('./home/timeline-controller.js');\n\nrequire('./profile/profile.js');\nrequire('./profile/profile-controller.js');\n\nrequire('./viewer/viewer.js');\nrequire('./viewer/viewer-controller.js');\nrequire('./viewer/viewer-sharebox-controller.js');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/core-deps.js\n ** module id = 0\n ** module chunks = 0\n **/","'use strict';\r\n\r\n/**\r\n * Module definition for common components used by other all other app modules.\r\n */\r\n\r\nangular.module('qibud.common', ['ui.bootstrap']);\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/common/common.js\n ** module id = 1\n ** module chunks = 0\n **/","\r\nangular.module('qibud.common').controller('SearchCtrl',\r\nfunction ($scope, api) {\r\n  $scope.results = {};\r\n  $scope.search = function(query) {\r\n    if(query) {\r\n      api.buds.search(query).success(function (results) {\r\n        if(results.hits){\r\n          if(results.hits.total > 0) {\r\n            $scope.results = results.hits.hits.map(function(item){\r\n              return item;\r\n            });\r\n          } else {\r\n            $scope.results = {}\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/common/search-controller.js\n ** module id = 2\n ** module chunks = 0\n **/","\r\nangular.module('qibud.common').controller('MailboxCtrl',\r\nfunction ($scope, $modal, api)\r\n{\r\n  $scope.emails = {};\r\n  api.mailboxes.get().success(function (emails) {\r\n    $scope.emails = emails;\r\n  });\r\n\r\n  $scope.openEmail = function (email) {\r\n    var modalInstance = $modal.open({\r\n      templateUrl: 'mail.html',\r\n      controller: 'MailConverterCtrl',\r\n      size: 'lg',\r\n      resolve: {\r\n        email: function () {\r\n          return email;\r\n        }\r\n      }\r\n    });\r\n\r\n    modalInstance.result.then(function (budId) {\r\n      //view bud\r\n\r\n    }, function () {\r\n      //dismiss\r\n    });\r\n  };\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/common/mailbox-controller.js\n ** module id = 3\n ** module chunks = 0\n **/","\r\nangular.module('qibud.common').controller('MailConverterCtrl',\r\nfunction ($scope, $modalInstance, email) {\r\n\r\n  $scope.email = email;\r\n\r\n  $scope.ok = function () {\r\n    $modalInstance.close($scope.selectedUsers);\r\n  };\r\n\r\n  $scope.cancel = function () {\r\n    $modalInstance.dismiss('cancel');\r\n  };\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/common/mail-controller.js\n ** module id = 4\n ** module chunks = 0\n **/","'use strict';\r\n\r\n/**\r\n * Service for providing access the backend API via HTTP and WebSockets.\r\n */\r\n\r\nangular.module('qibud.common').factory('api', function ($rootScope, $http, $window) {\r\n\r\n  var apiBase = 'api' /* base /api uri */,\r\n      token = ($window.sessionStorage.token || $window.localStorage.token),\r\n      headers = {Authorization: 'Bearer ' + token},\r\n      wsHost = ($window.document.location.origin || ($window.location.protocol + '//' + $window.location.host)).replace(/^http/, 'ws'),\r\n      api = {events: {}};\r\n\r\n  // initiate the websocket connection to the host\r\n  var ws = api.ws = new WebSocket(wsHost + '?access_token=' + token);\r\n  $window.setInterval(function () {\r\n    ws.send('ping');\r\n  }, 1000 * 25); // keep-alive signal (needed for heroku)\r\n\r\n  // utilize jQuery's callbacks as an event system\r\n  function event() {\r\n    var callbacks = $.Callbacks();\r\n    return {\r\n      subscribe: function ($scope, fn) {\r\n        if (fn) {\r\n          // unsubscribe from event on controller destruction to prevent memory leaks\r\n          $scope.$on('$destroy', function () {\r\n            callbacks.remove(fn);\r\n          });\r\n        } else {\r\n          fn = $scope;\r\n        }\r\n        callbacks.add(fn);\r\n      },\r\n      unsubscribe: callbacks.remove,\r\n      publish: callbacks.fire\r\n    };\r\n  }\r\n\r\n  // websocket connected disconnected events\r\n  api.connected = event();\r\n  ws.onopen = function () {\r\n    api.connected.publish.apply(this, arguments);\r\n    $rootScope.$apply();\r\n  };\r\n\r\n  api.disconnected = event();\r\n  ws.onclose = function () {\r\n    api.disconnected.publish.apply(this, arguments);\r\n    $rootScope.$apply();\r\n  };\r\n\r\n  // api http endpoints and websocket events\r\n  api.buds = {\r\n    search: function (query) {\r\n      return $http({method: 'GET', url: apiBase + '/buds/search/'+ query,headers: headers});\r\n    },\r\n    childrenByType: function (budId,type) {\r\n      return $http({method: 'GET', url: apiBase + '/buds/'+ budId + '/child/' + type, headers: headers});\r\n    },\r\n    list: function () {\r\n      return $http({method: 'GET', url: apiBase + '/buds', headers: headers});\r\n    },\r\n    view: function (budId) {\r\n      return $http({method: 'GET', url: apiBase + '/buds/' + budId + '/view', headers: headers});\r\n    },\r\n    update: function (bud) {\r\n      return $http({method: 'PUT', url: apiBase + '/buds/' + bud.id + '/update', data: bud, headers: headers});\r\n    },\r\n    updated: event(),\r\n    delete: function (budId) {\r\n      return $http({method: 'DELETE', url: apiBase + '/buds/' + budId, headers: headers});\r\n    },\r\n    create: function (bud) {\r\n      return $http({method: 'POST', url: apiBase + '/buds', data: bud, headers: headers});\r\n    },\r\n    createSub: function (parentBudId, bud) {\r\n      return $http({method: 'POST', url: apiBase + '/buds/' + parentBudId, data: bud, headers: headers});\r\n    },\r\n    created: event(),\r\n    evolve: function (budId, type) {\r\n      return $http({method: 'PUT', url: apiBase + '/buds/' + budId + '/evolve/' + type, headers: headers});\r\n    },\r\n    evolved: event(),\r\n    follow : function(bud) {\r\n      return $http({method: 'PUT', url: apiBase + '/buds/' + bud.id + '/follow', data: bud, headers: headers});\r\n    },\r\n    unfollow : function(bud) {\r\n      return $http({method: 'PUT', url: apiBase + '/buds/' + bud.id + '/unfollow', data: bud, headers: headers});\r\n    },\r\n    followersChanged: event(),\r\n    sponsor : function(bud) {\r\n      return $http({method: 'PUT', url: apiBase + '/buds/' + bud.id + '/sponsor', data: bud, headers: headers});\r\n    },\r\n    unsponsor : function(bud) {\r\n      return $http({method: 'PUT', url: apiBase + '/buds/' + bud.id + '/unsponsor', data: bud, headers: headers});\r\n    },\r\n    sponsorsChanged: event(),\r\n    support : function(bud, value) {\r\n      return $http({method: 'PUT', url: apiBase + '/buds/' + bud.id + '/support/' + value, data: bud, headers: headers});\r\n    },\r\n    unsupport : function(bud) {\r\n      return $http({method: 'PUT', url: apiBase + '/buds/' + bud.id + '/unsupport', data: bud, headers: headers});\r\n    },\r\n    supportersChanged: event(),\r\n    share : function(bud, users) {\r\n      return $http({method: 'PUT', url: apiBase + '/buds/' + bud.id + '/share', data: users, headers: headers});\r\n    },\r\n    budPacksData: {\r\n      create : function (budId, packData, type) {\r\n        return $http({method: 'POST', url: apiBase + '/buds/' + budId + '/packdata/' + type, data: packData, headers: headers});\r\n      },\r\n      get: function (budId, type) {\r\n        return $http({method: 'GET', url: apiBase + '/buds/' + budId + '/packdata/' + type, headers: headers});\r\n      },\r\n      set: function (budId, packData, type) {\r\n        return $http({method: 'PUT', url: apiBase + '/buds/' + budId + '/packdata/' + type, data: packData, headers: headers});\r\n      },\r\n      created: event(),\r\n      updated: event()\r\n    },\r\n    comments: {\r\n      create: function (budId, comment) {\r\n        return $http({method: 'POST', url: apiBase + '/buds/' + budId + '/comments', data: comment, headers: headers});\r\n      },\r\n      created: event()\r\n    }\r\n  };\r\n\r\n  api.qi = {\r\n    updated: event()\r\n  };\r\n\r\n  api.mailboxes = {\r\n    get: function () {\r\n      return $http({method: 'GET', url: apiBase + '/user/mailboxes/emails', headers: headers});\r\n    },\r\n    incoming: event()\r\n  };\r\n\r\n  api.links = {\r\n    createB2B : function (budId, type, budId2) {\r\n      return $http({method: 'POST', url: apiBase + '/links/b2b/' + budId + '/' + type + '/' + budId2, headers: headers});\r\n    },\r\n    createB2U : function (budId, type, userId) {\r\n      return $http({method: 'POST', url: apiBase + '/links/b2u/' + budId + '/' + type + '/' + userId, headers: headers});\r\n    },\r\n    createU2B : function (userId, type, budId) {\r\n      return $http({method: 'POST', url: apiBase + '/links/u2b/' + userId + '/' + type + '/' + budId, headers: headers});\r\n    },\r\n    deleteU2B : function (userId, type, budId) {\r\n      return $http({method: 'DELETE', url: apiBase + '/links/u2b/' + userId + '/' + type + '/' + budId, headers: headers});\r\n    },\r\n    findU2B : function (userId, type) {\r\n      return $http({method: 'GET', url: apiBase + '/links/u2b/' + userId + '/' + type, headers: headers});\r\n    }\r\n  };\r\n\r\n  api.users = {\r\n    list: function () {\r\n      return $http({method: 'GET', url: apiBase + '/users', headers: headers});\r\n    }\r\n  };\r\n\r\n  api.actors = {\r\n    list: function () {\r\n      return $http({method: 'GET', url: apiBase + '/actors', headers: headers});\r\n    }\r\n  };\r\n\r\n  api.events = {\r\n    list: function () {\r\n      return $http({method: 'GET', url: apiBase + '/events', headers: headers});\r\n    }\r\n  };\r\n\r\n  api.types = {\r\n    get: function (type) {\r\n      return $http({method: 'GET', url: apiBase + '/types/' + type, headers: headers})\r\n    },\r\n    list: function () {\r\n      return $http({method: 'GET', url: apiBase + '/types', headers: headers});\r\n    }\r\n  };\r\n\r\n  api.debug = {\r\n    clearDatabase: function () {\r\n      return $http({method: 'POST', url: apiBase + '/debug/clearDatabase', headers: headers});\r\n    }\r\n  };\r\n\r\n  // websocket data event (which transmits json-rpc payloads)\r\n  function index(obj, i) {\r\n    return obj[i];\r\n  } // convert dot notation string into an actual object index\r\n  ws.onmessage = function (event /* websocket event object */) {\r\n    var data = JSON.parse(event.data /* rpc event object (data) */);\r\n    if (!data.method) {\r\n      throw 'Malformed event data received through WebSocket. Received event data object was: ' + data;\r\n    } else if (!data.method.split('.').reduce(index, api)) {\r\n      throw 'Undefined event type received through WebSocket. Received event data object was: ' + data;\r\n    }\r\n    data.method.split('.').reduce(index, api).publish(data.params);\r\n    $rootScope.$apply();\r\n  };\r\n\r\n  return api;\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/common/api-service.js\n ** module id = 5\n ** module chunks = 0\n **/","angular.module('qibud.dashboard',[]).controller('DashboardCtrl', ['$scope', '$cookieStore', DashboardCtrl]);\nfunction DashboardCtrl($scope, $cookieStore) {\n    /**\n     * Sidebar Toggle & Cookie Control\n     *\n     */\n\n    var mobileView = 992;\n    $scope.getWidth = function() { return window.innerWidth; };\n\n    $scope.$watch($scope.getWidth, function(newValue, oldValue)\n    {\n        if(newValue >= mobileView)\n        {\n            if(angular.isDefined($cookieStore.get('toggle')))\n            {\n                if($cookieStore.get('toggle') == false)\n                {\n                    $scope.toggle = false;\n                }\n                else\n                {\n                    $scope.toggle = true;\n                }\n            }\n            else\n            {\n                $scope.toggle = true;\n            }\n        }\n        else\n        {\n            $scope.toggle = false;\n        }\n\n    });\n\n    $scope.toggleSidebar = function()\n    {\n        $scope.toggle = ! $scope.toggle;\n\n        $cookieStore.put('toggle', $scope.toggle);\n    };\n\n    window.onresize = function() { $scope.$apply(); };\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/dashboard/dashboard.js\n ** module id = 6\n ** module chunks = 0\n **/","'use strict';\r\n\r\n/**\r\n * Editor module for buds\r\n */\r\n\r\nangular\r\n    .module('qibud.editor', [\r\n      'ui.router',\r\n      'qibud.common'\r\n    ])\r\n    .config(function ($stateProvider, $urlRouterProvider) {\r\n      $stateProvider\r\n          .state('bud.editor', {\r\n            title: 'Qibud Editor',\r\n            url: \"/editor/:budId/:parentBudId/:content\",\r\n            breadcrumb: {\r\n              class: 'highlight',\r\n              text: 'Bud Editor',\r\n              stateName: 'bud.editor'\r\n            },\r\n            templateUrl: 'modules/editor/editor.html',\r\n            controller: 'EditorCtrl'\r\n      });\r\n    });\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/editor/editor.js\n ** module id = 7\n ** module chunks = 0\n **/","'use strict';\r\n\r\n/**\r\n * Editor controller provide a good way to edit/write buds\r\n */\r\n\r\nangular.module('qibud.editor').controller('EditorCtrl',\r\nfunction ($scope, $state, $stateParams, $modal, $location, api)\r\n{\r\n  var user       = $scope.common.user;\r\n\r\n  if($stateParams.budId)\r\n  {\r\n    api.buds.view($stateParams.budId).success(function (bud)\r\n    {\r\n      $scope.editedBud = bud;\r\n      $scope.budBox = {\r\n        title: bud.title,\r\n        content: bud.content,\r\n        privacy: bud.privacy,\r\n        type : bud.type,\r\n        disabled: false,\r\n        action: 'update'\r\n      };\r\n\r\n      $scope.setType(bud.type);\r\n    });\r\n  }\r\n  else\r\n  {\r\n    $scope.budBox  = {\r\n      title: null,\r\n      content: null,\r\n      type: 'Bud',\r\n      disabled: false,\r\n      privacy: 'Private',\r\n      action: 'create'\r\n    };\r\n  }\r\n\r\n  if($stateParams.parentBudId)\r\n  {\r\n    api.buds.view($stateParams.parentBudId).success(function (bud)\r\n    {\r\n      $scope.parentBud = bud;\r\n    });\r\n\r\n    $scope.budBox.action = 'subbud';\r\n  }\r\n\r\n  if($stateParams.content)\r\n  {\r\n    $scope.budBox.content = $stateParams.content;\r\n  }\r\n\r\n  $scope.editorOptions = {uiColor: '#000000'};\r\n\r\n  $scope.setType = function (type) {\r\n    if(type === 'Bud') {\r\n      $state.go('bud.editor');\r\n    } else {\r\n      $state.go('bud.editor.' + type);\r\n    }\r\n  };\r\n\r\n  // add bud creation functions to scope\r\n  $scope.createBud = function ($event)\r\n  {\r\n\r\n    // don't let the user type in blank lines or submit empty/whitespace only bud, or type in something when bud is being created\r\n    if (!$scope.budBox.content.length || $scope.budBox.disabled)\r\n    {\r\n      $event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    var modalInstance = $modal.open ({\r\n      templateUrl: 'evolvebox.html',\r\n      controller: 'EvolveCtrl',\r\n      size: 'lg',\r\n      resolve: {\r\n        availableTypes: function () {\r\n          return $scope.common.availableTypes;\r\n        }\r\n      }\r\n    });\r\n\r\n    var createSubBud = function (selectedType)\r\n    {\r\n      // disable the bud box and push the new bud to server\r\n      $scope.budBox.disabled = true;\r\n      api.buds.createSub($scope.parentBud.id,{\r\n        title: $scope.budBox.title,\r\n        content: $scope.budBox.content,\r\n        privacy: $scope.budBox.privacy,\r\n        type   : $scope.budBox.type\r\n      })\r\n      .success(function (budId)\r\n        {\r\n          // clear the bud box and enable it\r\n          $scope.budBox.title = '';\r\n          $scope.budBox.content = '';\r\n          $scope.budBox.disabled = false;\r\n\r\n          console.info ('subbud created');\r\n          if (selectedType !== null) {//evolve if needed\r\n            api.buds.evolve(budId, selectedType).success(function () {\r\n              console.info ('bud evolve in ' + selectedType);\r\n              $state.go('bud.viewer.' + selectedType ,{budId : budId},{ reload: true });\r\n            });\r\n          } else {\r\n            $state.go('bud.viewer',{budId : budId},{ reload: true });\r\n          }\r\n        })\r\n        .error(function ()\r\n        {\r\n          // don't clear the bud box but enable it so the user can re-try\r\n          $scope.budBox.disabled = false;\r\n        });\r\n    };\r\n\r\n    var createBud = function (selectedType) {\r\n      // disable the bud box and push the new bud to server\r\n      $scope.budBox.disabled = true;\r\n      api.buds.create({\r\n        title: $scope.budBox.title,\r\n        content: $scope.budBox.content,\r\n        privacy: $scope.budBox.privacy,\r\n        type   : $scope.budBox.type\r\n      })\r\n      .success(function (budId)\r\n          {\r\n            // clear the bud box and enable it\r\n            $scope.budBox.title = '';\r\n            $scope.budBox.content = '';\r\n            $scope.budBox.disabled = false;\r\n\r\n            console.info ('bud created');\r\n            if (selectedType !== null) {//evolve if needed\r\n              api.buds.evolve(budId, selectedType).success(function () {\r\n                console.info ('bud evolve in ' + selectedType);\r\n                $state.go('bud.viewer.' + selectedType ,{budId : budId},{ reload: true });\r\n              });\r\n            } else {\r\n              $state.go('bud.viewer',{budId : budId},{ reload: true });\r\n            }\r\n        })\r\n        .error(function ()\r\n        {\r\n          // don't clear the bud box but enable it so the user can re-try\r\n          $scope.budBox.disabled = false;\r\n        });\r\n    };\r\n\r\n    modalInstance.result.then(function (selectedType) {\r\n      if ($scope.parentBud.id) {\r\n        createSubBud (selectedType);\r\n      } else {\r\n        createBud (selectedType);\r\n      }\r\n\r\n    }, function () {\r\n      if ($scope.parentBud.id) {\r\n        createSubBud (null);\r\n      } else {\r\n        createBud (null);\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n  $scope.updateBud = function ($event)\r\n  {\r\n    // don't let the user type in blank lines or submit empty/whitespace only bud, or type in something when bud is being created\r\n    if (!$scope.budBox.content.length || $scope.budBox.disabled)\r\n    {\r\n      $event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    // disable the bud box and push the new bud to server\r\n    $scope.budBox.disabled = true;\r\n\r\n    $scope.editedBud.title   = $scope.budBox.title;\r\n    $scope.editedBud.content = $scope.budBox.content;\r\n    $scope.editedBud.privacy = $scope.budBox.privacy;\r\n    $scope.editedBud.type    = $scope.budBox.type === 'Bud' ?\r\n                                '' : $scope.budBox.type;\r\n\r\n\r\n\r\n\r\n    api.buds.update($scope.editedBud).success(function (bud)\r\n    {\r\n      //redirect\r\n      $state.go('bud.viewer', {budId: $scope.editedBud.id},{ reload: true });\r\n    })\r\n    .error(function ()\r\n    {\r\n      // don't clear the bud box but enable it so the user can re-try\r\n      $scope.budBox.disabled = false;\r\n    });\r\n  };\r\n\r\n\r\n\r\n  // subscribe to websocket events to receive new buds, comments, etc.\r\n  api.buds.created.subscribe($scope, function (bud)\r\n  {\r\n\r\n  });\r\n\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/editor/editor-controller.js\n ** module id = 8\n ** module chunks = 0\n **/","'use strict';\n\nangular.module('qibud.editor').controller('EvolveCtrl', function ($scope, $modalInstance, availableTypes) {\n\n  $scope.availableTypes = availableTypes;\n  $scope.selectedType = 'Bud';\n\n  $scope.setSelected = function (type) {\n    $scope.selectedType = type;\n  };\n  \n  $scope.ok = function () {\n    $modalInstance.close($scope.selectedType);\n  };\n\n  $scope.cancel = function () {\n    $modalInstance.dismiss('cancel');\n  };\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/editor/editor-evolve-controller.js\n ** module id = 9\n ** module chunks = 0\n **/","'use strict';\r\n\r\n/**\r\n * Home module for displaying home page content.\r\n */\r\n\r\nangular\r\n    .module('qibud.home', [\r\n      'ui.router',\r\n      'qibud.common'\r\n    ])\r\n    .config(function ($stateProvider, $urlRouterProvider) {\r\n      $stateProvider\r\n      .state('home.stickers', {\r\n        title: 'Dashboard',\r\n        breadcrumb: {\r\n          class: 'highlight',\r\n          text: 'Bud stickers',\r\n          stateName: 'bud.home.stickers'\r\n        },\r\n        url: \"/stickers\",\r\n        templateUrl: 'modules/home/home-stickers.html',\r\n        controller: 'HomeCtrl'\r\n      })\r\n      .state('home.budgraph', {\r\n        title: 'Bud Graph',\r\n        breadcrumb: {\r\n          class: 'highlight',\r\n          text: 'Bud Graph',\r\n          stateName: 'bud.home.budgraph'\r\n        },\r\n        url: \"/graph\",\r\n        templateUrl: 'modules/home/home-budgraph.html',\r\n        controller: 'BudgraphCtrl'\r\n      })\r\n      .state('home.timeline', {\r\n        title: 'Bud Timeline',\r\n        breadcrumb: {\r\n          class: 'highlight',\r\n          text: 'Bud Timeline',\r\n          stateName: 'bud.home.timeline'\r\n        },\r\n        url: \"/timeline\",\r\n        templateUrl: 'modules/home/home-timeline.html',\r\n        controller: 'TimelineCtrl'\r\n      });\r\n    });\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/home/home.js\n ** module id = 10\n ** module chunks = 0\n **/","'use strict';\r\n\r\n/**\r\n * Home controller simply lists all the buds from everyone on the front page.\r\n */\r\n\r\nangular.module('qibud.home').controller('HomeCtrl',\r\nfunction ($scope, $state, api, budGraph)\r\n{\r\n  var user       = $scope.common.user;\r\n  api.buds.list().success(function (buds)\r\n  { \r\n    $scope.buds = buds;\r\n\r\n    api.links.findU2B(user.id, 'ACTOR').success(function (buds)\r\n    {\r\n      buds.forEach(function (bud)\r\n      {\r\n        _.remove($scope.buds, function(b) { return b.id === bud._id; });\r\n      });\r\n\r\n      $scope.budsActingOn = buds;\r\n    });\r\n  });\r\n\r\n\r\n  // subscribe to websocket events to receive new buds, comments, etc.\r\n  api.buds.created.subscribe($scope, function (bud)\r\n  {\r\n    // only add the bud if we don't have it already in the buds list to avoid dupes\r\n    if (!_.some($scope.buds, function (b)\r\n    {\r\n      return b.id === bud.id;\r\n    }))\r\n    {\r\n      $scope.buds.unshift(bud);\r\n    }\r\n  });\r\n\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/home/home-controller.js\n ** module id = 11\n ** module chunks = 0\n **/","'use strict';\r\n\r\n/**\r\n * Home module for displaying home page content.\r\n */\r\n\r\nangular\r\n    .module('qibud.home')\r\n    .factory('budGraph', [ '$q', function( $q ) {\r\n      var cy;\r\n\r\n      var budGraph = function(buds) {\r\n        var deferred = $q.defer();\r\n\r\n        // put buds model in cy.js\r\n        var eles = [];\r\n        for( var i = 0; i < buds.length; i++ ){\r\n          var bud = buds[i];\r\n          var info;\r\n\r\n\r\n          if (bud.dataCache.state) {\r\n            info = '[' + bud.type + '] ' + bud.dataCache.state;\r\n          }  else {\r\n            info = bud.title;\r\n          }\r\n\r\n          eles.push({\r\n            group: 'nodes',\r\n            data: {\r\n              id: bud.id,\r\n              type: bud.typeInfo,\r\n              weight: bud.qi,\r\n              size: 200,\r\n              label: {\r\n                content: bud.type\r\n              },\r\n              name: info,\r\n              faveColor: '#30426a',\r\n              faveShape: 'roundrectangle'\r\n            }\r\n          });\r\n        }\r\n\r\n        for( var i = 0; i < buds.length; i++ ){\r\n          if(buds[i].subBuds) {\r\n            for( var s = 0; s < buds[i].subBuds.length; s++ ) {\r\n              eles.push({\r\n                group: 'edges',\r\n                data: {\r\n                  source: buds[i].id,\r\n                  target: buds[i].subBuds[s].id,\r\n                  faveColor: '#30426a',\r\n                  strength: 1\r\n                }\r\n              });\r\n            }\r\n          }\r\n\r\n        }\r\n\r\n        $(function(){ // on dom ready\r\n\r\n          cy = cytoscape({\r\n            container: $('#cy')[0],\r\n\r\n            style: cytoscape.stylesheet()\r\n              .selector('node')\r\n                .css({\r\n                  'shape': 'data(faveShape)',\r\n                  'width': 'data(size)',\r\n                  'height': 100,\r\n                  'content': 'data(name)',\r\n                  'text-valign': 'center',\r\n                  'text-outline-width': 2,\r\n                  'background-color': 'data(faveColor)',\r\n                  'color': '#fff',\r\n                  'box-shadow': '0 10px 18px rgba(0,0,0,.22),0 14px 45px rgba(0,0,0,.25)'\r\n                })\r\n              .selector(':selected')\r\n                .css({\r\n                  'border-width': 3,\r\n                  'border-color': '#333'\r\n                })\r\n              .selector('edge')\r\n                .css({\r\n                  'opacity': 0.666,\r\n                  'width': 'mapData(strength, 35, 50, 2, 6)',\r\n                  'target-arrow-shape': 'triangle',\r\n                  'source-arrow-shape': 'circle',\r\n                  'line-color': 'data(faveColor)',\r\n                  'source-arrow-color': 'data(faveColor)',\r\n                  'target-arrow-color': 'data(faveColor)'\r\n                })\r\n              .selector('.faded')\r\n                .css({\r\n                  'opacity': 0.25,\r\n                  'text-opacity': 0\r\n                }),\r\n\r\n            layout: {\r\n              name: 'breadthfirst',\r\n              directed: true,\r\n              padding: 5\r\n            },\r\n\r\n            elements: eles,\r\n\r\n            ready: function() {\r\n              deferred.resolve( this );\r\n\r\n              cy.on('cxtdrag', 'node', function(e){\r\n                var node = this;\r\n              });\r\n\r\n              cy.on('tap', 'node', function(e){\r\n                var node = this;\r\n                fire('onClick', [ node.id() ]);\r\n              });\r\n\r\n\r\n            }\r\n          });\r\n\r\n        }); // on dom ready\r\n\r\n        return deferred.promise;\r\n      };\r\n\r\n      budGraph.listeners = {};\r\n\r\n      function fire(e, args){\r\n        var listeners = budGraph.listeners[e];\r\n\r\n        for( var i = 0; listeners && i < listeners.length; i++ ){\r\n          var fn = listeners[i];\r\n\r\n          fn.apply( fn, args );\r\n        }\r\n      }\r\n\r\n      function listen(e, fn){\r\n        var listeners = budGraph.listeners[e] = budGraph.listeners[e] || [];\r\n\r\n        listeners.push(fn);\r\n      }\r\n\r\n      budGraph.onClick = function(fn){\r\n        listen('onClick', fn);\r\n      };\r\n\r\n      return budGraph;\r\n\r\n    }]);\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/home/budgraph-factory.js\n ** module id = 12\n ** module chunks = 0\n **/","'use strict';\r\n\r\n/**\r\n * Home controller simply lists all the buds from everyone on the front page.\r\n */\r\n\r\nangular.module('qibud.home').controller('BudgraphCtrl',\r\nfunction ($scope, $state, api, budGraph)\r\n{\r\n  var user       = $scope.common.user;\r\n  var cy; // maybe you want a ref to cy\r\n  // (usually better to have the srv as intermediary)\r\n\r\n  var budsById = {};\r\n  // retrieve buds from server\r\n  api.buds.list().success(function (buds)\r\n  {\r\n    $scope.buds = buds;\r\n    for( var i = 0; i < $scope.buds.length; i++ ){\r\n      var p = $scope.buds[i];\r\n\r\n      budsById[ p.id ] = p;\r\n    }\r\n\r\n    // you would probably want some ui to prevent use of budsCtrl until cy is loaded\r\n    budGraph( $scope.buds ).then(function( budsCy ){\r\n      cy = budsCy;\r\n      // use this variable to hide ui until cy loaded if you want\r\n      $scope.cyLoaded = true;\r\n    });\r\n  });\r\n\r\n\r\n  budGraph.onClick(function(id){\r\n    $state.go('bud.viewer',{budId : id});\r\n  });\r\n\r\n  // subscribe to websocket events to receive new buds, comments, etc.\r\n  api.buds.created.subscribe($scope, function (bud)\r\n  {\r\n    // only add the bud if we don't have it already in the buds list to avoid dupes\r\n    if (!_.some($scope.buds, function (b)\r\n    {\r\n      return b.id === bud.id;\r\n    }))\r\n    {\r\n      bud.comments = [];\r\n      bud.commentBox = {message: '', disabled: false};\r\n      $scope.buds.unshift(bud);\r\n    }\r\n  });\r\n\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/home/budgraph-controller.js\n ** module id = 13\n ** module chunks = 0\n **/","'use strict';\r\n\r\n/**\r\n *\r\n */\r\n\r\nangular.module('qibud.home').controller('TimelineCtrl',\r\nfunction ($scope, $state, api, budGraph)\r\n{\r\n  var user       = $scope.common.user;\r\n\r\n  api.events.list().success(function (events)\r\n  {\r\n    $scope.events = events;\r\n  });\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/home/timeline-controller.js\n ** module id = 14\n ** module chunks = 0\n **/","'use strict';\r\n\r\n/**\r\n * Profile module for user profile and related content.\r\n */\r\n\r\nangular\r\n    .module('qibud.profile', [\r\n      'ui.router',\r\n      'qibud.common'\r\n    ])\r\n    .config(function ($stateProvider, $urlRouterProvider) {\r\n      $stateProvider\r\n          .state('bud.profile', {\r\n            url: \"/profile\",\r\n            title: 'User Profile',\r\n            breadcrumb: {\r\n              class: 'highlight',\r\n              text: 'User Profile',\r\n              stateName: 'bud.profile'\r\n            },\r\n            templateUrl: 'modules/profile/profile.html',\r\n            controller: 'ProfileCtrl'\r\n      });\r\n    });\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/profile/profile.js\n ** module id = 15\n ** module chunks = 0\n **/","'use strict';\r\n\r\n/**\r\n * Profile controller gives the user the means to view/edit their public profile info.\r\n */\r\n\r\nangular.module('qibud.profile').controller('ProfileCtrl', function ($scope) {\r\n  // 'common' variable is always added to the root scope and it contains common things like user info, common functions etc.\r\n  $scope.user = $scope.common.user /* this is not needed actually. we can always directly use {{common.user}} variable directly in any view */;\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/profile/profile-controller.js\n ** module id = 16\n ** module chunks = 0\n **/","'use strict';\r\n\r\n/**\r\n * Editor module for buds\r\n */\r\n\r\nangular\r\n    .module('qibud.viewer', [\r\n      'ui.router',\r\n      'ui.bootstrap',\r\n      'qibud.common'\r\n    ])\r\n    .config(function ($stateProvider, $urlRouterProvider) {\r\n\r\n      var types  = ['Team'];\r\n      var states = [];\r\n      var availableViews = {};\r\n\r\n      availableViews['@'] = {\r\n        controller: 'ViewerCtrl',\r\n        templateUrl: 'modules/viewer/viewer.html',\r\n      };\r\n\r\n\r\n      states.push({\r\n        name: 'bud.viewer',\r\n        sticky: true,\r\n        url: '/viewer/:budId',\r\n        views: availableViews,\r\n        breadcrumb: {\r\n          class: 'highlight',\r\n          text: 'Bud Viewer',\r\n          stateName: 'bud.viewer'\r\n        } });\r\n\r\n      angular.forEach(states, function(state) { $stateProvider.state(state); });\r\n    });\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/viewer/viewer.js\n ** module id = 17\n ** module chunks = 0\n **/","'use strict';\r\n\r\n/**\r\n * Viewer controller provide a good way to read buds\r\n */\r\n\r\nangular.module('qibud.viewer').controller('ViewerCtrl',\r\nfunction ($scope, $state, $stateParams, $modal, api)\r\n{\r\n\r\n  var user       = $scope.common.user;\r\n  $scope.typeInfo = null;\r\n  $scope.ready = false;\r\n  $scope.actionInProgress = false;\r\n  $scope.followersCount = 0;\r\n  $scope.sponsorsCount = 0;\r\n  $scope.supportersCount = 0;\r\n  $scope.supportValue = 0;\r\n  $scope.shareCount = 0;\r\n  // retrieve one bud from server\r\n\r\n  $scope.load = function (callback)\r\n  {\r\n    console.info ('loading...');\r\n    $scope.ready = false;\r\n    api.buds.view($stateParams.budId).success(function (bud)\r\n    {\r\n      bud.commentBox = {message: '', disabled: false};\r\n      bud.comments   = bud.comments || [];\r\n\r\n      $scope.bud = bud;\r\n      if(bud.followers)\r\n      {\r\n          $scope.followersCount = bud.followers.length;\r\n          if(bud.followers.indexOf(user.id)!== -1)\r\n          {\r\n            $scope.follower = true;\r\n          }\r\n          else\r\n          {\r\n            $scope.follower = false;\r\n          }\r\n      }\r\n      else\r\n      {\r\n        $scope.follower = false;\r\n      }\r\n\r\n      if(bud.sponsors)\r\n      {\r\n        $scope.sponsorsCount = bud.sponsors.length;\r\n        if(bud.sponsors.indexOf(user.id)!== -1)\r\n        {\r\n          $scope.sponsorer = true;\r\n        }\r\n        else\r\n        {\r\n          $scope.sponsorer = false;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        $scope.sponsorer = false;\r\n      }\r\n\r\n      if(bud.supporters)\r\n      {\r\n        $scope.supportersCount = bud.supporters.length;\r\n        if(bud.supporters.indexOf(user.id)!== -1)\r\n        {\r\n          $scope.supporter = true;\r\n        }\r\n        else\r\n        {\r\n          $scope.supporter = false;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        $scope.supporter = false;\r\n      }\r\n\r\n      if(bud.shares)\r\n      {\r\n        $scope.shareCount = bud.shares.length;\r\n      }\r\n\r\n      $scope.ready = true;\r\n      $scope.showType ($scope.bud.type, false);\r\n      console.info ('loaded!');\r\n\r\n      if (callback) {\r\n        callback();\r\n      }\r\n\r\n    });\r\n  }\r\n  //Init view\r\n  $scope.load();\r\n\r\n  $scope.showType = function (type, reload) {\r\n    if (type !== 'Bud') {\r\n      $state.go('bud.viewer.' + type, $state.params, { reload: reload });\r\n    } else {\r\n      $state.go('bud.viewer',$state.params, { reload: reload });\r\n    }\r\n  };\r\n\r\n  $scope.evolve = function ($event, type) {\r\n    if ($scope.actionInProgress)\r\n    {\r\n      $event.preventDefault();\r\n      return;\r\n    }\r\n    $scope.actionInProgress = true;\r\n\r\n    api.buds.evolve($scope.bud, type).success(function () {\r\n      $scope.actionInProgress = false;\r\n    })\r\n    .error(function ()\r\n    {\r\n      $scope.actionInProgress = false;\r\n    });\r\n\r\n  };\r\n\r\n  $scope.canEvolve = function ()\r\n  {\r\n    if(!$scope.bud) {\r\n      return false;\r\n    }\r\n\r\n    if($scope.bud.type === 'Bud' && $scope.bud.creator.id === user.id) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  $scope.editSubBud = function () {\r\n    $state.go('bud.editor',{parentBud : $scope.bud});\r\n  };\r\n\r\n  $scope.budify = function (content) {\r\n    $state.go('bud.editor',{parentBud : $scope.bud, content: content});\r\n  };\r\n\r\n  $scope.delete = function () {\r\n    api.buds.delete($scope.bud.id).success(function (){\r\n      $state.go('home.stickers');\r\n    });\r\n  };\r\n\r\n  $scope.canDelete = function () {\r\n    if(!$scope.bud) {\r\n      return false;\r\n    }\r\n    var goodUser = ($scope.bud.creator.id == $scope.common.user.id);\r\n    var noSubBuds = (!$scope.bud.subBuds || $scope.bud.subBuds.length == 0);\r\n    return goodUser && noSubBuds;\r\n  }\r\n\r\n  $scope.share = function () {\r\n    api.actors.list().success(function (actors)\r\n    {\r\n      var modalInstance = $modal.open({\r\n        templateUrl: 'sharebox.html',\r\n        controller: 'ShareboxCtrl',\r\n        size: 'lg',\r\n        resolve: {\r\n          users: function () {\r\n            return actors.users;\r\n          },\r\n          teams: function () {\r\n            return actors.teams;\r\n          }\r\n        }\r\n      });\r\n\r\n      modalInstance.result.then(function (actors) {\r\n        //share to ->\r\n        api.buds.share($scope.bud, actors).success(function (bud) {\r\n\r\n        });\r\n\r\n      }, function () {\r\n        //dismiss\r\n      });\r\n    });\r\n  };\r\n\r\n  $scope.canShare = function ()\r\n  {\r\n    var sharable = false;\r\n    if(!$scope.bud) {\r\n      return sharable;\r\n    }\r\n\r\n    var creatorId = $scope.bud.creator.id;\r\n\r\n    //TODO: Add a watch on privacy changes check actor\r\n    switch($scope.bud.privacy)\r\n    {\r\n      case 'Private':\r\n        if(creatorId === user.id)\r\n        {\r\n          sharable = true;\r\n        }\r\n      break;\r\n      case 'Private2Share':\r\n        if(creatorId === user.id)\r\n        {\r\n          sharable = true;\r\n        }\r\n      break;\r\n    case 'Free2Share':\r\n        sharable = true;\r\n      break;\r\n    }\r\n\r\n    return sharable;\r\n  };\r\n\r\n\r\n  $scope.followBud = function ($event)\r\n  {\r\n    if ($scope.actionInProgress)\r\n    {\r\n      $event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    $scope.actionInProgress = true;\r\n    if(!$scope.follower)\r\n    {\r\n      api.buds.follow($scope.bud)\r\n        .success(function (budId)\r\n        {\r\n          $scope.actionInProgress = false;\r\n        })\r\n        .error(function ()\r\n        {\r\n          $scope.actionInProgress = false;\r\n        });\r\n    }\r\n    else\r\n    {\r\n      api.buds.unfollow($scope.bud)\r\n        .success(function (budId)\r\n        {\r\n          $scope.actionInProgress = false;\r\n        })\r\n        .error(function ()\r\n        {\r\n          $scope.actionInProgress = false;\r\n        });\r\n    }\r\n  }\r\n\r\n  $scope.supportBud = function ($event)\r\n  {\r\n    if ($scope.actionInProgress)\r\n    {\r\n      $event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    $scope.actionInProgress = true;\r\n\r\n    if(!$scope.supporter)\r\n    {\r\n      api.buds.support($scope.bud, $scope.supportValue)\r\n        .success(function (budId)\r\n        {\r\n          $scope.actionInProgress = false;\r\n        })\r\n        .error(function ()\r\n        {\r\n          $scope.actionInProgress = false;\r\n        });\r\n    }\r\n    else\r\n    {\r\n      api.buds.unsupport($scope.bud)\r\n        .success(function (budId)\r\n        {\r\n          $scope.actionInProgress = false;\r\n        })\r\n        .error(function ()\r\n        {\r\n          $scope.actionInProgress = false;\r\n        });\r\n    }\r\n  }\r\n\r\n  $scope.sponsorBud = function ($event)\r\n  {\r\n    if ($scope.actionInProgress)\r\n    {\r\n      $event.preventDefault();\r\n      return;\r\n    }\r\n    $scope.actionInProgress = true;\r\n\r\n    if(!$scope.sponsorer)\r\n    {\r\n      api.buds.sponsor($scope.bud)\r\n        .success(function (budId)\r\n        {\r\n          $scope.actionInProgress = false;\r\n        })\r\n        .error(function ()\r\n        {\r\n          $scope.actionInProgress = false;\r\n        });\r\n    }\r\n    else\r\n    {\r\n      api.buds.unsponsor($scope.bud)\r\n        .success(function (budId)\r\n        {\r\n          $scope.actionInProgress = false;\r\n        })\r\n        .error(function ()\r\n        {\r\n          $scope.actionInProgress = false;\r\n        });\r\n    }\r\n  }\r\n\r\n  api.buds.followersChanged.subscribe($scope, function (bud) {\r\n    if ($scope.bud.id === bud.id)\r\n    {\r\n      $scope.bud.followers = bud.followers;\r\n      $scope.followersCount = bud.followers.length;\r\n      if(bud.followers.indexOf(user.id)!== -1)\r\n      {\r\n        $scope.follower = true;\r\n      }\r\n      else\r\n      {\r\n        $scope.follower = false;\r\n      }\r\n    }\r\n  });\r\n\r\n  api.buds.supportersChanged.subscribe($scope, function (bud) {\r\n    if ($scope.bud.id === bud.id)\r\n    {\r\n      $scope.bud.supporters = bud.supporters;\r\n      $scope.supportersCount = bud.supporters.length;\r\n\r\n      if(bud.supporters.indexOf(user.id) !== -1)\r\n      {\r\n        $scope.supporter = true;\r\n      }\r\n      else\r\n      {\r\n        $scope.supporter = false;\r\n      }\r\n    }\r\n  });\r\n\r\n  api.buds.sponsorsChanged.subscribe($scope, function (bud) {\r\n    if ($scope.bud.id === bud.id)\r\n    {\r\n      $scope.bud.sponsors = bud.sponsors;\r\n      $scope.sponsorsCount = bud.sponsors.length;\r\n      if(bud.sponsors.indexOf(user.id) !== -1)\r\n      {\r\n        $scope.sponsorer = true;\r\n      }\r\n      else\r\n      {\r\n        $scope.sponsorer = false;\r\n      }\r\n    }\r\n  });\r\n\r\n  $scope.createComment = function ($event, bud)\r\n  {\r\n    // submit the message in the comment box only if user hits 'Enter (keycode 13)'\r\n    if ($event.keyCode !== 13)\r\n    {\r\n      return;\r\n    }\r\n\r\n    // don't let the user type in blank lines or submit empty/whitespace only comment, or type in something when comment is being created\r\n    if (!bud.commentBox.message.length || bud.commentBox.disabled) {\r\n      $event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    // disable the comment box and push the new comment to server\r\n    bud.commentBox.disabled = true;\r\n    api.buds.comments.create(bud.id, {message: bud.commentBox.message})\r\n        .success(function (commentId)\r\n        {\r\n          // only add the comment if we don't have it already in the bud's comments list to avoid dupes\r\n          if (!_.some(bud.comments, function (c) {\r\n            return c.id === commentId;\r\n          }))\r\n          {\r\n            bud.comments.push({\r\n              id: commentId,\r\n              from: user,\r\n              message: bud.commentBox.message,\r\n              createdTime: new Date()\r\n            });\r\n          }\r\n\r\n          // clear the comment field and enable it\r\n          bud.commentBox.message  = '';\r\n          bud.commentBox.disabled = false;\r\n        })\r\n        .error(function ()\r\n        {\r\n          // don't clear the comment box but enable it so the user can re-try\r\n          bud.commentBox.disabled = false;\r\n        });\r\n\r\n    // prevent default 'Enter' button behavior (create new line) as we want 'Enter' button to do submission\r\n    $event.preventDefault();\r\n  };\r\n\r\n  api.buds.comments.created.subscribe($scope, function (comment) {\r\n    // only add the comment if we don't have it already in the bud's comments list to avoid dupes\r\n    if ($scope.bud && !_.some($scope.bud.comments, function (c)\r\n    {\r\n      return c.id === comment.id;\r\n    }))\r\n    {\r\n      $scope.bud.comments.push(comment);\r\n    }\r\n  });\r\n\r\n  api.buds.updated.subscribe($scope, function (bud) {\r\n    if ($scope.bud.id === bud.id)\r\n    {\r\n      $scope.bud = bud;\r\n      if(bud.shares)\r\n      {\r\n        $scope.shareCount = bud.shares.length;\r\n      }\r\n    }\r\n  });\r\n\r\n  api.buds.evolved.subscribe($scope, function (bud) {\r\n    if ($scope.bud.id === bud.id)\r\n    {\r\n      $scope.load ();\r\n    }\r\n  });\r\n\r\n  api.qi.updated.subscribe($scope, function (bud) {\r\n    if ($scope.bud.id === bud.id)\r\n    {\r\n      $scope.bud.qi = bud.qi;\r\n    }\r\n  });\r\n\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./modules/viewer/viewer-controller.js\n ** module id = 18\n ** module chunks = 0\n **/"],"sourceRoot":""}